El sistema de prioridades implementado en este proyecto busca manejar de forma ordenada la ejecución de múltiples procesos dentro del sistema operativo xv6, asignando a cada proceso una prioridad que determina el orden en que serán ejecutados. La lógica de funcionamiento es la siguiente:

Cada proceso en el sistema tiene asignado un campo de prioridad (con valor inicial 0) y un campo de boost (con valor inicial 1).
Prioridad y boost operan juntos: mientras más baja la prioridad (números menores), más alto será el privilegio del proceso para ejecutarse.
Cada vez que un nuevo proceso entra al sistema, se incrementa la prioridad de todos los procesos que pueden ejecutarse.
Se ajusta el campo de prioridad con la fórmula prioridad += boost.
Cuando la prioridad alcanza el valor de 9, el boost cambia a -1 para reducir prioridad.
Cuando la prioridad llega a 0, el boost se establece en 1 para aumentar la prioridad.
El scheduler (planificador) selecciona el proceso con mayor prioridad (valor numérico menor) para ejecutarse.
Este sistema asegura que todos los procesos tengan una oportunidad justa de ejecución, evitando el monopolio de la CPU por procesos de prioridad fija.

Explicación de las Modificaciones Realizadas
Para implementar el sistema de prioridades, se realizaron los siguientes cambios:

Estructura de Proceso (proc.h):

Se agregaron los campos prioridad y boost en la estructura del proceso para gestionar la prioridad de cada proceso.
Asignación de Prioridad y Boost (proc.c):

En la función allocproc, se inicializan prioridad en 0 y boost en 1 al momento de crear el proceso.
Planificador (scheduler en proc.c):

En scheduler, se añadió lógica para ajustar la prioridad y boost de cada proceso.
Se selecciona el proceso con el menor valor de prioridad para ejecutarse.
La selección se implementa buscando el proceso con la prioridad más baja en cada ciclo.
Archivo de Pruebas (prueba.c):

Se creó un archivo de pruebas para validar el funcionamiento de las prioridades, ejecutando múltiples procesos y mostrando el orden en que se ejecutan de acuerdo a su prioridad.
Dificultades Encontradas y Soluciones Implementadas
Sincronización y Selección de Procesos:

Uno de los desafíos fue garantizar que los procesos con mayor prioridad se ejecuten primero. Se resolvió utilizando un campo adicional de boost y asegurando que el scheduler elija el proceso con prioridad más baja (mayor prioridad de ejecución).
Problemas de Intercalado en la Impresión:

Durante las pruebas, algunos procesos imprimían mensajes de forma desordenada. Para mitigarlo, se utilizó un mecanismo de ajuste de prioridad que permite a los procesos esperar su turno adecuado en el scheduler.
Conflictos de Branch en Git:

Para restaurar archivos y ramas después de problemas con git, se realizó un reset y push desde una rama estable anterior, asegurando que los archivos modificados se integraran en la nueva rama sin conflicto.
